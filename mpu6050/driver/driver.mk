ifndef DRIVER_MAKEFILE_
DRIVER_MAKEFILE_ = included


export DRIVERS_NAME = my_mpu6050

# When natively compiling, we can infer the kernel's source tree directory,
# if the user has not specified it.
ifndef CROSS_COMPILE
    KERNEL_VERSION = $(shell uname -r)
    KBUILD_DIR ?= /lib/modules/$(KERNEL_VERSION)/build/
endif

# The kernel symbols file, used to determine if the kernel has been updated
KERNEL_SYMS = $(KBUILD_DIR)/Module.symvers


DRIVERS_DIR = driver

# The list of source files for the driver. Export the names to the Kbuild file.
export DRIVERS_FILE = mpu6050_chrdev.c mpu6050.c mpu6050_i2c.c mpu6050_config.c
DRIVER_PATHS = $(addprefix $(DRIVER_DIR)/,$(AXIDMA_FILES))

# Kernel object files generated by compilation
DRIVERS_OBJECTS = $(DRIVERS_DIR)/$(DRIVERS_NAME).ko
DRIVERS_OUTPUT_OBJECTS = $(OUTPUT_DIR)/$(DRIVERS_NAME).ko

# These targets don't correspond to actual generated files
.PHONY: drivers drivers_clean kbuild_def_check arch_def_check \
		kbuild_exists_check kbuild_built_check

# User- facing targets for compiling the driver/
drivers: $(DRIVERS_OUTPUT_OBJECTS)


$(DRIVERS_OBJECTS): $(DRIVER_PATHS)  |  kbuild_def_check \
		kbuild_exists_check \
		kbuild_built_check \
		arch_def_check \
		cross_compiler_check
	@echo ARCH=$(ARCH) CC=$(CC)
	make -C $(KBUILD_DIR)  M=$(PWD)/$(DRIVERS_DIR) modules

$(DRIVERS_OUTPUT_OBJECTS): $(DRIVERS_OBJECTS)  $(OUTPUT_DIR)
	@cp $< $@


# clean target
drivers_clean: | kbuild_def_check arch_def_check kbuild_exists_check
	rm -f $(DRIVERS_OUTPUT_OBJECTS)
	make -C $(KBUILD_DIR) M=$(PWD)/$(DRIVERS_DIR) clean

# Check that KBUILD_DIR is explicitly specified when cross-compiling
kbuild_def_check:
ifndef KBUILD_DIR
	@printf "Error: The variable 'KBUILD_DIR' must be specified when "
	@printf "cross-compiling the driver.\n"
	@exit 1
endif

# Check that ARCH is defined when CROSS_COMPILE is specified
arch_def_check:
ifdef CROSS_COMPILE
ifndef ARCH
	@printf "Error: 'ARCH' must be specified when cross-compiling the driver.\n"
	@exit 1
endif
endif


# Check that the specified kernel source tree directory exists
kbuild_exists_check:
ifeq (,$(wildcard $(KBUILD_DIR)))
	@printf "Error: $(KBUILD_DIR): The kernel source tree does not exist.\n"
	@exit 1
endif

# Check that the kernel is built in the specified kernel source tree
kbuild_built_check:
ifeq (,$(wildcard $(KERNEL_SYMS)))
	@printf "Error: $(KBUILD_DIR): This is not a valid kernel build tree or "
	@printf "the kernel has not yet been built. The kernel must be built "
	@printf "before compiling the driver against it.\n"
	@exit 1
endif

endif